---
- name: "self : provision : Install KVM packages"
  yum:
    name:
    - kvm
    - qemu-kvm
    - libvirt
    - libvirt-python
    - libguestfs-tools
    - virt-install
- name: "self : provision : Check KVM module is available"
  shell: "lsmod | grep -i kvm"
  failed_when: cmd_return.rc == 2
  become: yes
  register: cmd_return
- name: "self : provision : Ensure KVM module is available"
  fail:
    msg: |
      Could not provision self infrastructure because KVM kernel module is not available. 
      You must run self infrastructure on workstation with virtualisation kernel module loaded.
  when:
  - cmd_return.rc == 1
- name: "self : provision : Enable service libvirtd"
  systemd:
    name: libvirtd
    enabled: yes
    state: started
- debug:
    var: "{{ station }}"
  loop: "{{ libre_infra.kvm.classroom }}"
  loop_control:
    loop_var: station
    label: "{{ station.name }}"

- name: "self : provision : Generate instructor inventory {{config_libre.directory.conf}}/inventory/instructor.yml"
  template:
    src: "templates/inventory-instructor.j2"
    dest: "{{config_libre.directory.conf}}/inventory/instructor.yml"
    mode: 0664
    owner: "{{ r_libre_user }}"
    group: "{{ r_libre_group }}"
- name: "self : provision : Generate students inventory {{config_libre.directory.conf}}/inventory/students.yml"
  template:
    src: "templates/inventory-students.j2"
    dest: "{{config_libre.directory.conf}}/inventory/students.yml"
    mode: 0664
    owner: "{{ r_libre_user }}"
    group: "{{ r_libre_group }}"
- name: "self : provision : Update /etc/hosts file"
  blockinfile:
    dest: /etc/hosts
    content: "{{ libre_infra.network.associated_ip }}       localhost.localdomain localhost instructor.{{libre_infra.network.dns}} student.{{libre_infra.network.dns}}"
    state: present
- name: "self : provision : Create the libre user group"
  group:
    name: "{{ r_infra_usergroup }}"
    state: present
- name: "self : provision : Create the instructor user"
  user:
    state: present
    name: "{{ r_infra_user_instructor }}"
    comment: "LIBRE {{ r_infra_user_instructor }}"
    group: "{{ r_infra_usergroup }}"
- name: "self : provision : Create the student user"
  user:
    state: present
    name: "{{ r_infra_user_student }}"
    comment: "LIBRE {{ r_infra_user_student }}"
    group: "{{ r_infra_usergroup }}"
- name: "self : provision : Authorize instructor SSH key"
  authorized_key:
    user: "{{ user1 }}"
    state: present
    key: "{{ lookup('file', '../../ssh/'+r_infra_user_instructor+'-id_rsa.pub') }}"
  loop:
    - root
    - "{{ r_infra_user_instructor }}"
    - "{{ r_infra_user_student }}"
  loop_control:
    loop_var: user1
- name: "self : provision : Authorize student SSH key"
  authorized_key:
    user: "{{ r_infra_user_student }}"
    state: present
    key: "{{ lookup('file', '../../ssh/'+r_infra_user_student+'-id_rsa.pub') }}"
- name: "self : provision : Ensure instructor SSH private and public key are present"
  copy:
    src: ../../ssh/{{ r_infra_user_instructor }}-{{keyf.key}}
    dest: "{{keyf.dir}}/.ssh/{{keyf.key}}"
    mode: 0600
    owner: "{{keyf.user}}"
    group: "{{ r_infra_usergroup }}"
  loop:
    - user: "{{ r_infra_user_instructor }}"
      key: id_rsa.pub
      dir: "/home/{{ r_infra_user_instructor }}"
    - user: "{{ r_infra_user_instructor }}"
      key: id_rsa
      dir: "/home/{{ r_infra_user_instructor }}"
    - user: root
      key: id_rsa.pub
      dir: "/root/"
    - user: root
      key: id_rsa
      dir: "/root/"
  loop_control:
    loop_var: keyf
- name: "self : provision : Ensure student SSH private and public key are present"
  copy:
    src: ../../ssh/{{ r_infra_user_student }}-{{keyf}}
    dest: "/home/{{ r_infra_user_student }}/.ssh/{{keyf}}"
    mode: 0600
    owner: "{{ r_infra_user_student }}"
    group: "{{ r_infra_usergroup }}"
  loop:
    - id_rsa.pub
    - id_rsa
  loop_control:
    loop_var: keyf
- name: "self : provision : Set infrastructure state to provisionned"
  set_fact:
    libre_infra: "{{ libre_infra|combine({'state': 'provisionned' }, recursive=True) }}"
- name: "self : provision : Update infrastructure config file {{ config_libre.directory.conf }}/{{ r_infra_config_file }}"
  template:
    src: templates/libre-infra.j2
    dest: "{{ config_libre.directory.conf }}/{{ r_infra_config_file }}"
  become: yes
- name: "self : provision : Get previous report data"
  set_fact:
    previous_report: "{{ lookup('file', r_libre_tmp + '/' + r_libre_tmpfile) | default('') }}"
  delegate_to: localhost
- name: "self : provision : Generate LIBRE report at {{ r_libre_tmp }}/{{ r_libre_tmpfile }}"
  template:
    src: templates/libre_report-provision.j2
    dest: "{{ r_libre_tmp }}/{{ r_libre_tmpfile }}"
    mode: 0664
  delegate_to: localhost
- name: "self : provision : Log provision action"
  include_role:
    name: libre
    tasks_from: lib/log
  vars:
    log_name: "Self-Hosted infrastructure is Provisionned"
    log_component: infra-self
    log_action: provision
- name: "self : provision : Infrastructure provisionning is finish"
  debug:
    msg:
      - "We are happy to report that self infrastructure {{ libre_session.id }} for course {{ libre_session.course }} was successfully provisioned on Self-Hosted infrastructure"
      - " "
      - "Here are some interesting characteristics of this infrastructure:"
      - " "
      - "  - Instructor: instructor.{{ libre_infra.network.dns }}"
      - "  - Student   : student.{{ libre_infra.network.dns }}"
      - "  - IP address: {{ libre_infra.network.associated_ip }}"
      - " "
      - " You can continue this process by :"
      - " "
      - "1. Review and complete the generated inventory {{config_libre.directory.conf}}/inventory/infra.yml"
      - "2. Start post-provisionning your infrastructure by executing the following command :"
      - "   $ libre-infra self post-provision"
      - " "
      - "You can also check in {{ r_libre_dest_ansible }}/inventory for sample inventory to use"
      - "before lauching infrastructure post-provisionning."
      - " "
      - " Have an happy training ;)"
